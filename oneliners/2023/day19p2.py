print((lambda workflows: (lambda f: f(f, {ch: (1, 4000) for ch in "xmas"}))(lambda f, ranges, name = "in": 0 if name == "R" else (lambda a: a[0] * a[1] * a[2] * a[3])([x[1] - x[0] + 1 for x in ranges.values()]) if name == "A" else (lambda g: g(g, ranges, workflows[name]))(lambda g, ranges, rules: 0 if len(rules) == 0 else f(f, ranges, rules[0]) if ":" not in rules[0] else (lambda ch, cmp, n, target: (lambda T, F: (f(f, {k: T if k == ch else v for k, v in ranges.items()}, target) if T[0] <= T[1] else 0) + (g(g, {k: F if k == ch else v for k, v in ranges.items()}, rules[1:]) if F[0] <= F[1] else 0))((ranges[ch][0], min(ranges[ch][1], n - 1)) if cmp == "<" else (max(n + 1, ranges[ch][0]), ranges[ch][1]), (max(ranges[ch][0], n), ranges[ch][1]) if cmp == "<" else (ranges[ch][0], min(ranges[ch][1], n))))(rules[0][0], rules[0][1], int(rules[0][2:].split(":")[0]), rules[0].split(":")[1]))))((lambda block: ({line.split("{")[0]: line[:-1].split("{")[1].split(",") for line in block.splitlines()}))(open(0).read().split("\n\n")[0])))
