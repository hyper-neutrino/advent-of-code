print((lambda U, D, L, R: (lambda dirs, g: (lambda sr, sc: (lambda a, g: [[(lambda n: a.append((r, c, *n)) if n != (sr, sc) else None)(next((r + dr, c + dc) for dr, dc in dirs[g[r][c]] if (r + dr, c + dc) != (pr, pc))) for pr, pc, r, c in a], (len(a) + 1) // 2][1])(*(lambda S: ([(sr, sc, sr + dirs[S][0][0], sc + dirs[S][0][1])], [row.replace("S", S) for row in g]))(next(dir for dir in dirs if set(dirs[dir]) == set(sum([[U] if sr > 0 and D in dirs[g[sr - 1][sc]] else [], [D] if sr < len(g) - 1 and U in dirs[g[sr + 1][sc]] else [], [L] if sc > 0 and R in dirs[g[sr][sc - 1]] else [], [R] if sc < len(g[0]) - 1 and L in dirs[g[sr][sc + 1]] else []], []))))))(*[(r, c) for r, row in enumerate(g) for c, ch in enumerate(row) if ch == "S"][0]))({"|": (U, D), "-": (L, R), "L": (U, R), "J": (U, L), "7": (D, L), "F": (D, R), ".": ()}, open(0).read().splitlines()))((-1, 0), (1, 0), (0, -1), (0, 1)))
