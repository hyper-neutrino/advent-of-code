print((lambda grid, f = lambda grid, r, c, dr, dc, q, seen: [q.append((r, c, dr, dc)), seen.add((r, c, dr, dc)), (lambda add: [(lambda ch: add(r + dr, c + dc, dr, dc) if ch == "." or ch == "-" and dc or ch == "|" and dr else add(r + dc, c + dr, dc, dr) if ch == "\\" else add(r - dc, c - dr, -dc, -dr) if ch == "/" else (add(r - 1, c, -1, 0), add(r + 1, c, 1, 0)) if ch == "|" else (add(r, c - 1, 0, -1), add(r, c + 1, 0, 1)))(grid[r][c]) for r, c, dr, dc in q])(lambda r, c, dr, dc: 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (r, c, dr, dc) not in seen and [q.append((r, c, dr, dc)), seen.add((r, c, dr, dc))]), len({(r, c) for r, c, _, _ in seen})][-1]: (lambda f: max(max(max(f(r, 0, 0, 1), f(r, len(grid[0]) - 1, 0, -1)) for r in range(len(grid))), max(max(f(0, c, 1, 0), f(len(grid) - 1, c, -1, 0)) for c in range(len(grid[0])))))(lambda r, c, dr, dc: f(grid, r, c, dr, dc, [], set())))(open(0).read().splitlines()))
